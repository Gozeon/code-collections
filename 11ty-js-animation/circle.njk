---
tags: page
link: /circle
layout: layout.njk
site_title: 圆形内碰撞运动
---

<style>
    .box {
        width: 600px;
        height: 600px;
        border: 1px solid cadetblue;
        position: relative;

        margin: 0 auto;
        border-radius: 50%;
        overflow: hidden;
    }

    .item {
        width: 100px;
        height: 100px;
        background: antiquewhite;
        left: 102px;
        bottom: 50px;
        position: absolute;
        border-radius: 50%;
    }

    .item1 {
        width: 100px;
        height: 100px;
        background: chartreuse;
        left: 190px;
        bottom: 8px;
        position: absolute;
        border-radius: 50%;
    }

    .item2 {
        width: 100px;
        height: 100px;
        background: saddlebrown;
        left: 260px;
        bottom: 0px;
        position: absolute;
        border-radius: 50%;
    }

    .item3 {
        width: 100px;
        height: 100px;
        background: violet;
        left: 318px;
        bottom: 10px;
        position: absolute;
        border-radius: 50%;
    }

    .item4 {
        width: 100px;
        height: 100px;
        background: gold;
        left: 342px;
        bottom: 17px;
        position: absolute;
        border-radius: 50%;
    }

    .item5 {
        width: 100px;
        height: 100px;
        background: blue;
        left: 422px;
        bottom: 69px;
        position: absolute;
        border-radius: 50%;
    }

</style>

<img width="300px" height="200px" src="/images/index.png" alt="">

<div>
    <button onclick="start()">start</button>
    <button onclick="stop()">stop</button>
    <button onclick="reset()">reset</button>
</div>
<div class="box">
    <div class="item">item</div>
    <div class="item1">item1</div>
    <div class="item2">item2</div>
    <div class="item3">item3</div>
    <div class="item4">item4</div>
    <div class="item5">item5</div>
</div>


<script>
    class CircleMove {
        el
        speed
        limit
        defaultPos
        rotate

        timer
        timeout = 30

        constructor(el, speed, rotate=true) {
            this.el = el
            this.speed = speed
            this.rotate = rotate

            this.defaultPos = {
                left: this.el.offsetLeft,
                top: this.el.offsetTop
            }

            // 屏幕范围
            // let limit = {
            //     t: 0,
            //     l: 0,
            //     b: document.documentElement.clientHeight - 100,
            //     r: document.documentElement.clientWidth - 100
            // }


			// 如果父组件是圆形，边界就锁定在内部正方形里面
			const pEl = this.el.parentNode.offsetWidth
			const circleOffset = (pEl -  Math.sqrt(pEl * pEl / 2)) / 2.5
            this.limit = {
                t: circleOffset,
                l: circleOffset,
                b: this.el.parentNode.offsetHeight - this.el.offsetHeight - circleOffset,
                r: this.el.parentNode.offsetWidth - this.el.offsetWidth - circleOffset
            }
        }

        start() {
            // 防止按钮点击多次
            this.stop()
            this.timer = setInterval(() => {
                let l = this.el.offsetLeft + this.speed.x
                let t = this.el.offsetTop + this.speed.y

                document.title = l + ',' + t

                // 上下边界
                if (t >= this.limit.b) {
                    this.speed.y = this.speed.y * -1
                    t = this.limit.b
                } else if (t <= this.limit.t) {
                    this.speed.y = this.speed.y * -1
                    t = this.limit.t
                }

                // 左右边界
                if (l >= this.limit.r) {
                    this.speed.x = this.speed.x * -1
                    l = this.limit.r
                } else if (l <= this.limit.l) {
                    this.speed.x = this.speed.x * -1
                    l = this.limit.l
                }

                this.el.style.left = l + 'px'
                this.el.style.top = t + 'px'

                if (this.rotate) {
                    this.el.style.transform = `rotate(${l}deg)`
                }
            }, this.timeout)
        }


        stop() {
            if (this.timer) {
                clearInterval(this.timer)
            }
        }

        reset() {
            this.el.style.top = (this.defaultPos.top || 0) + 'px'
            this.el.style.left = (this.defaultPos.left || 0) + 'px'
            if (this.rotate) {
                this.el.style.transform = `rotate(0deg)`
            }
        }
    }


    var item = new CircleMove(
        document.querySelector('.item'),
        {
            x: 25,
            y: 20
        }
    )

    var item1 = new CircleMove(
        document.querySelector('.item1'),
        {
            x: 23,
            y: 15
        }
    )

    var item2 = new CircleMove(
        document.querySelector('.item2'),
        {
            x: 73,
            y: 15
        }
    )
    var item3 = new CircleMove(
        document.querySelector('.item3'),
        {
            x: 53,
            y: 8
        }
    )
    var item4 = new CircleMove(
        document.querySelector('.item4'),
        {
            x: -23,
            y: 39
        }
    )

    var item5 = new CircleMove(
        document.querySelector('.item5'),
        {
            x: -13,
            y: 39
        }
    )


    function start() {
        item.start()
        item1.start()
        item2.start()
        item3.start()
        item4.start()
        item5.start()
    }

    function stop() {
        item.stop()
        item1.stop()
        item2.stop()
        item3.stop()
        item4.stop()
        item5.stop()
    }

    function reset() {
        item.reset()
        item1.reset()
        item2.reset()
        item3.reset()
        item4.reset()
        item5.reset()
    }
</script>
